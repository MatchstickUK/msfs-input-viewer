
@use "./styles/utils" as *;

html, body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
*, *:before, *:after {
    box-sizing: inherit;
}

#InputViewer_Frame .ingameUiWrapper {
    position: relative;
}

#DevOverlay {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 999;
    pointer-events: none;

    > .error {
        background-color: crimson;
    }
}

#ConfigPopup_Container {
    position: absolute;
    width: 100%;
    height: 100%;
    min-height: 100%;
    z-index: 100;

    background-color: rgba(0, 0, 0, 0.7);

    display: flex;
    flex-direction: column;

    font-weight: bold;

    #Config_ScrollCont {
        flex: 1 1 auto;
    }

    new-list-button {
        // Make it slightly slim
        --optionContentWidth: #{scaled(350)};  // 500 for .condensedPanel, 700 for default
    }

    .sectionTitle {
        padding: scaled(16) scaled(16) scaled(8);

        font-weight: normal;

        &:not(:first-child) {
            margin-top: scaled(16);
        }
    }

    .info {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        background-color: var(--backgroundColorPanel);

        $size: 96;

        & > .icon {
            flex: 0 0 scaled($size);

            display: flex;
            flex-direction: row;
            align-items: center;

            background-color: var(--backgroundColorPanel);

            icon-element {
                --width: #{scaled($size)};
                --height: #{scaled($size)};
            }
        }

        & > .description {
            display: flex;
            justify-content: flex-start;
            align-items: center;

            overflow: hidden;
            padding: scaled(12);

            font-weight: normal;
        }
    }
}

#NumberDisp_Verbose_Container {
    position: absolute;
    width: 100%;
    height: 100%;

    display: flex;
    justify-content: center;
    align-items: center;

    z-index: 50;
    pointer-events: none;

    .numberDispGrid {
        display: grid;
        grid-template-columns: 1fr 2fr;

        div {
            padding: 0 scaled(16);

            font-size: calc(var(--fontSizeParagraph) * 0.75);

            background-color: var(--color-black-op20);

            &:nth-child(4n+1),
            &:nth-child(4n+2) {
                background-color: var(--color-black-op30);
            }
        }
    }
}

#NumberDisp_Simple_Container {
    opacity: 0.8;
    .bg {
        .name {
            fill: white;
        }
        .primary {
            fill: #3E3E3E;
        }
        .secondary {
            fill: #818181;
        }
        .aileronTip {
            fill: #DA0000;
        }
        .elevatorTip {
            fill: #00C200;
        }
        .rudderTip {
            fill: #0000C2;
        }
        .brakeTip {
            fill: #EEB000;
        }
        .propellerPrimary {
            fill: #004DC7;
        }
        .mixturePrimary {
            fill: #B1352A;
        }
    }
    .label {
        text {
            font-size: 7px;
            text-anchor: middle;
            dominant-baseline: central;
        }
        .name {
            font-weight: 800;
            fill: rgba(0, 0, 0, 0.7);
        }
        .numberDisp {
            fill: white;
            .zero {
                fill: rgba(255, 255, 255, 0.5);
            }
        }
    }

    .throttleContainer {
        > g {
            display: none;
        }
    }
    &[data-mode=SingleEngine] {
        .throttle1Container {
            display: inline;
        }
    }
    &[data-mode=TwinEngine] {
        .throttle1Container,
        .throttle2Container {
            display: inline;
        }
    }
    &[data-mode=ThreeEngine] {
        .throttle1Container,
        .throttle2Container,
        .throttle3Container {
            display: inline;
        }
    }
    &[data-mode=FourEngine] {
        .throttle1Container,
        .throttle2Container,
        .throttle3Container,
        .throttle4Container {
            display: inline;
        }
    }
    &[data-mode=PropMix] {
        .throttle1Container,
        .propeller1Container,
        .mixture1Container {
            display: inline;
        }
    }
}

#InputViewer {
    #InputViewer_Container {
        overflow: hidden;
        // --headerHeight: #{scaled(87)};

        // --containerWidth: calc(100vw - var(--contentMargin) * 2);
        // --containerHeight: calc(100vh - var(--contentMargin) * 2 - var(--headerHeight));

        // We substitute this var from JS since MSFS/CoherentGT's CSS doesn't support `min()` function yet.
        // --widget-aspect-ratio: calc(280 / 260);
        // --widgetWidth: min(var(--containerWidth), calc(var(--containerHeight) * var(--widget-aspect-ratio)));
        --widgetWidth: 100px;  // placeholder

        --panelDim: calc(var(--widgetWidth) * (220 / 280));
        --throttlePanelWidth: calc(var(--panelDim) * (60 / 220));
        --rudderPanelHeight:  calc(var(--panelDim) * (40 / 220));

        position: absolute;

        width: var(--containerWidth);
        height: var(--containerHeight);

        display: grid;

        grid-template-columns: var(--throttlePanelWidth) var(--panelDim);
        grid-template-rows: var(--panelDim) var(--rudderPanelHeight);
        grid-template-areas:
            "throttle stick"
            "config rudder";
        justify-content: space-evenly;  // x-axis
        align-content: center;          // y-axis

        background-color: rgba(0, 0, 0, 0.1);
        // background-color: blue;

        #OpenConfigPanel {
            grid-area: config;
        }
        #StickPanel {
            grid-area: stick;
        }
        #RudderPanel {
            grid-area: rudder;
        }
        #ThrottlePanel {
            grid-area: throttle;
        }
    }
}

#OpenConfigPanel {
    display: flex;
    justify-content: center;
    align-items: center;

    #OpenConfig {
        // Default = scaled(60)
        --width: #{scaled(90)};
        --height: #{scaled(60)};
    }
}

toggle-button.togglePropMix {  
    @function handleOffset($factor) {
        // More factor, more left
        @return var(--leftPos, #{scaled(56 - 12 * $factor)});
    }

    icon-element {
        position: absolute;

        top: scaled(2);
        width: scaled(36);
        height: scaled(36);

        transition: basic-transition(left, opacity);

        &#PropellerIcon {
            left: handleOffset(1.15);  // Add 0.15 to move it to left slightly
        }
        &#MixtureIcon {
            left: handleOffset(0);
        }
    }

    .ToggleButton .toggleButtonWrapper .toggleButton .state {
        left: handleOffset(2);
        transition: basic-transition(left, background-color);
    }

    &:not(.off) {
        .ToggleButton .toggleButtonWrapper .toggleButton .state {
            background-color: #4F4F4F;
        }
    }

    &.off {
        icon-element {
            opacity: 0;
        }
    }
}

#InputViewer_Container {
    .grad1, .grad2, .grad3 {
        fill: none;
        stroke: var(--primaryColor);
    }
    .grad1 {
        stroke-width: 3;
    }
    .grad2 {
        stroke-width: 1;
    }
    .grad3 {
        stroke-width: 1;
        opacity: 0.5;
    }

    .inputPos {
        fill: none;
        stroke: white;
        stroke-width: 3;
    }
    .trimPos {
        stroke: white;
        stroke-width: 1;
    }

    #RudderPanel {
        .wheelBrakeBar {
            .fg {
                fill: orange;
            }
            .cap {
                stroke: var(--primaryColor);
                stroke-width: 1;
            }
        }
    }

    #ThrottlePanel {
        .throttleBar {
            .fg {
                fill: white;
            }
            .cap {
                stroke: var(--primaryColor);
                stroke-width: 0.5;  // Compensates x2 scaling in y-axis
            }

            &.propeller {
                .fg {
                    fill: skyblue;
                }
            }
            &.mixture {
                .fg {
                    fill: salmon;
                }
            }
        }

        #ThrottleBars,
        #ThrottleBordersV,
        #ThrottleBordersH {
            & > * {
                display: none;
            }
        }

        @mixin showThrottleBars($n, $is-prop-mixture: false) {
            // Translate
            #ThrottleBars,
            #ThrottleBordersV {
                transform: translate($n * -5px, 0);
            }

            // Toggle visibility
            @for $i from 1 through $n {
                @if $is-prop-mixture {
                    @if $i == 1 {
                        #ThrottleBar_#{$i},
                        #PropellerBar_#{$i},
                        #MixtureBar_#{$i} {
                            display: inline;
                        }
                    }
                } @else {
                    #ThrottleBar_#{$i} {
                        display: inline;
                    }
                }

                #ThrottleBordersV > *:nth-child(#{$i}) {
                    display: inline;
                }
            }
            #ThrottleBordersV > *:nth-child(#{$n + 1}) {
                display: inline;
            }
            #ThrottleBordersH > *:nth-child(#{$n}) {
                display: inline;
            }
        }

        &[data-mode=SingleEngine] {
            @include showThrottleBars(1);
        }
        &[data-mode=TwinEngine] {
            @include showThrottleBars(2);
        }
        &[data-mode=ThreeEngine] {
            @include showThrottleBars(3);
        }
        &[data-mode=FourEngine] {
            @include showThrottleBars(4);
        }
        &[data-mode=PropMix] {
            @include showThrottleBars(3, true);
        }
    }
}
